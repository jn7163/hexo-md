---
title: C++ 异常
date: 2017-08-29 07:51:00
categories:
- cpp
tags:
- cpp
keywords: C++ 异常 exception
---

> 
C++ 异常

<!-- more -->

## 异常处理入门（try和catch）
程序的错误大致可以分为三种，分别是`语法错误`、`逻辑错误`和`运行时错误`：
1) 语法错误在编译和链接阶段就能发现，只有 100% 符合语法规则的代码才能生成可执行程序；
语法错误是最容易发现、最容易定位、最容易排除的错误，程序员最不需要担心的就是这种错误；

2) 逻辑错误是说我们编写的代码思路有问题，不能够达到最终的目标，这种错误可以通过调试来解决；

3) 运行时错误是指程序在运行期间发生的错误，例如除数为 0、内存分配失败、数组越界、文件不存在等；
C++ `异常（Exception）`机制就是为解决运行时错误而引入的；

运行时错误如果放任不管，系统就会执行默认的操作，`终止程序运行`，也就是我们常说的`程序崩溃（Crash）`；
C++ 提供了`异常（Exception）机制`，让我们能够捕获运行时错误，给程序一次“起死回生”的机会，或者至少告诉用户发生了什么再终止程序；

一个发生运行时错误的例子：
<pre><code class="language-bash line-numbers"><script type="text/plain">
#include <iostream>
#include <string>

using namespace std;

int main() {
    string str = "www.zfl9.com";

    char c1 = str[20];  // 下标越界，c1为垃圾值
    cout << c1 << endl;

    char c2 = str.at(20);   // 下标越界，抛出异常std::out_of_range
    cout << c2 << endl;
    return 0;
}
</script></code></pre>

<pre><code class="language-bash line-numbers"><script type="text/plain">
# root @ arch in ~/work on git:master x [8:45:25] C:134
$ g++ a.cpp

# root @ arch in ~/work on git:master x [8:45:31]
$ ./a.out
þ
terminate called after throwing an instance of 'std::out_of_range'
  what():  basic_string::at: __n (which is 20) >= this->size() (which is 12)
[1]    12312 abort (core dumped)  ./a.out
</script></code></pre>


at() 是 string 类的一个成员函数，它会根据下标来返回字符串的一个字符；
与 [] 不同，at() 会检查下标是否越界，如果越界就抛出一个异常；而 [] 不做检查，不管下标是多少都会照常访问；

上面的代码中，下标 20 显然超出了字符串 str 的长度；
由于第 9 行代码不会检查下标越界，虽然有逻辑错误，但是程序能够正常运行；
而第 12 行代码则不同，at() 函数检测到下标越界会抛出一个异常，这个异常可以由程序员处理，但是我们在代码中并没有处理，所以系统只能**执行默认的操作**，也即**终止程序执行**；

**捕获异常**
我们可以借助 C++ 异常机制来捕获上面的异常，避免程序崩溃；捕获异常的语法为：
<pre><code class="language-bash line-numbers"><script type="text/plain">
try {
    // 可能抛出异常的语句
} catch(exceptionType variable) {
    // 处理异常的语句
}
</script></code></pre>


`try`和`catch`都是 C++ 中的关键字，后跟语句块，不能省略`{}`；
try 中包含可能会抛出异常的语句，一旦有异常抛出就会被后面的 catch 捕获；

从 try 的意思可以看出，它只是“检测”语句块有没有异常，如果没有发生异常，它就“检测”不到；
catch 是“抓住”的意思，用来捕获并处理 try 检测到的异常；如果 try 语句块没有检测到异常（没有异常抛出），那么就不会执行 catch 中的语句；

catch 关键字后面的`exceptionType variable`指明了当前 catch 可以处理的异常类型，以及具体的出错信息；
我们稍后再对异常类型展开讲解，当务之急是演示一下`try-catch`的用法，先让读者有一个整体上的认识；

修改上面的代码，加入捕获异常的语句：
<pre><code class="language-bash line-numbers"><script type="text/plain">
#include <iostream>
#include <string>
#include <exception>

using namespace std;

int main() {
    string str = "www.zfl9.com";

    try {
        char c1 = str[20];  // 下标越界，c1为垃圾值
        cout << c1 << endl;
    } catch(exception &e) {
        cout << e.what() << endl;
    }

    try {
        char c2 = str.at(20);   // 下标越界，抛出异常std::out_of_range
        cout << c2 << endl;
    } catch(exception &e) {
        cout << e.what() << endl;
    }

    return 0;
}
</script></code></pre>

<pre><code class="language-bash line-numbers"><script type="text/plain">
# root @ arch in ~/work on git:master x [8:59:32]
$ g++ a.cpp

# root @ arch in ~/work on git:master x [8:59:42]
$ ./a.out

basic_string::at: __n (which is 20) >= this->size() (which is 12)
</script></code></pre>
